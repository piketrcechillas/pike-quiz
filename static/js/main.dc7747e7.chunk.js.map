{"version":3,"sources":["global/functions.js","components/question/Question.js","components/answer/Answer.js","components/Quiz.js","app.js","serviceWorker.js","index.js"],"names":["Array","prototype","remove","what","ax","a","arguments","L","length","this","indexOf","splice","Question","props","question","Answer","console","log","answerState","answers","Object","keys","answer","map","qAnswer","i","className","checkList","verifyAnswer","onClick","pushAnswer","key","Context","input","onLoad","onError","MathJax","error","warn","Hub","Queue","Typeset","script","options","asciimath2jax","useMathMLspacing","delimiters","preview","Text","text","disabled","Quiz","state","questions","1","2","3","4","5","6","correctAnswers","correctAnswer","clickedAnswer","step","score","includes","newState","setState","checkAnswer","add","aResult","nextStep","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.dc7747e7.chunk.js","sourcesContent":["Array.prototype.remove = function() {\r\n    let what, a = arguments, L = a.length, ax;\r\n    while (L && this.length) {\r\n        what = a[--L];\r\n        while ((ax = this.indexOf(what)) !== -1) {\r\n            this.splice(ax, 1);\r\n        }\r\n    }\r\n    return this;\r\n};","import React from 'react';\r\nimport './Question.css';\r\n\r\nconst Question = (props) => {\r\n    return (\r\n        <h1>{props.question}</h1>\r\n    );\r\n}\r\n\r\nexport default Question;","import React from 'react';\r\nimport './Answer.css';\r\nimport MathJax from 'react-mathjax2'\r\n\r\nconst Answer = (props) => {\r\n\r\n    console.log('AnswerState:' + props.answerState)\r\n    let answers = Object.keys(props.answer)\r\n        .map((qAnswer, i) => (\r\n            <li\r\n            className=\r\n\r\n            {\r\n                props.answerState == 0 ?\r\n                   props.checkList(qAnswer) ?\r\n                        'check' : '' :\r\n                        props.checkList(qAnswer) ?\r\n                            props.verifyAnswer(qAnswer) ?\r\n                            'correct' : 'incorrect'\r\n                            : ''\r\n            }\r\n\r\n\r\n            onClick={() => props.pushAnswer(qAnswer)}\r\n            key={qAnswer}>\r\n\r\n\r\n                <MathJax.Context\r\n                    input='ascii'\r\n                    onLoad={ () => console.log(\"Loaded MathJax script!\") }\r\n                    onError={ (MathJax, error) => {\r\n                        console.warn(error);\r\n                        console.log(\"Encountered a MathJax error, re-attempting a typeset!\");\r\n                        MathJax.Hub.Queue(\r\n                            MathJax.Hub.Typeset()\r\n                        );\r\n                    } }\r\n                    script=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=AM_HTMLorMML\"\r\n                    options={ {\r\n                        asciimath2jax: {\r\n                            useMathMLspacing: true,\r\n                            delimiters: [[\"$$\",\"$$\"]],\r\n                            preview: \"none\",\r\n                        }\r\n                    } }\r\n                >\r\n                    <MathJax.Text text={props.answer[qAnswer]}/>\r\n                </MathJax.Context>\r\n            </li>\r\n        ));\r\n\r\n        return (\r\n            <>\r\n                <ul\r\n                    disabled={props.answerState != 0 ? true : false}\r\n                    className=\"Answers\">\r\n                    {answers}\r\n                </ul>\r\n                <div>\r\n                    {\r\n                        props.answerState == 1 ?\r\n                        'Correct Answer!' : \r\n                        props.answerState == -1 ? 'Incorrect Answer!' : ''\r\n                    }\r\n                </div>\r\n            </>\r\n        );\r\n}\r\n\r\nexport default Answer;","import React, {Component} from 'react';\r\nimport Question from './question/Question';\r\nimport Answer from './answer/Answer';\r\nimport './QuizMain.css';\r\nimport '../global/functions'\r\n\r\n\r\nconst equations = {\r\n    1: ''\r\n}\r\n\r\n\r\nexport default class Quiz extends Component {\r\n\r\n\r\n    state = {\r\n        questions: {\r\n            1: 'What is the phenomenon when the 50-day SMA crosses above the 200-day SMA called?',\r\n            2: 'What is the formula for calculating the EMA?',\r\n            3: 'Select all correct statements. '\r\n        },\r\n        answers: {\r\n            1: {\r\n                1: 'a.  Death cross',\r\n                2: 'b.  Death crossover',\r\n                3: 'c.  Golden cross',\r\n                4: 'd.  Golden crossover'\r\n            },\r\n            2: {\r\n                1: 'a.    $$(A_1+A_2+⋯+A_n)/n$$, with $$A_n$$ being the price of an asset at period n, and n being the number of periods.',\r\n                2: 'b.    $$(〖(A〗_n×W_1)+(A_(n-1)×W_2)+⋯+(A_1×W_n))/(∑W)$$, with $$A_n$$ being the price of an asset at period n, n being the most recent period, and W being the assigned weight for each period such that the most recent period has the highest weight.',\r\n                3: 'c.    $$A_n×W+〖EMA〗_(n-1)×(1-W)$$, with $$A_n$$ being the price of an asset at period n, n being the current period, and W being the smoothing multiplier.'\r\n            },\r\n            3: {\r\n                1: 'a.SMA puts more weight to more current data, whereas EMA weighs every data point equally.',\r\n                2: 'b.EMA reacts to changes in market condition more quickly than SMA.',\r\n                3: 'c.EMA is more prone to generating false signal than SMA.',\r\n                4: 'd.SMA is more suitable for intraday trading than EMA. ',\r\n                5: 'e.Both SMA and EMA works well in sideway markets. ',\r\n                6: 'f.Both SMA and EMA are lagging indicators. '\r\n            }\r\n        },\r\n        correctAnswers: {\r\n            1: ['3'],\r\n            2: ['3'],\r\n            3: ['2', '3', '6']\r\n        },\r\n        correctAnswer: 0,\r\n        clickedAnswer: [],\r\n        step: 1,\r\n        score: 0,\r\n        answerState: 0\r\n    }\r\n\r\n    pushAnswer = answer => {\r\n\r\n        if(this.state.clickedAnswer.includes(answer)) {\r\n\r\n            let newState = this.state.clickedAnswer.remove(answer)\r\n\r\n            this.setState({\r\n               clickedAnswer: newState\r\n            });\r\n        }\r\n\r\n        else {\r\n            this.setState({\r\n                clickedAnswer: [...this.state.clickedAnswer, answer]\r\n            });\r\n        }\r\n    }\r\n\r\n    checkList = answer => {\r\n\r\n        if(this.state.clickedAnswer.includes(answer)) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    verifyAnswer = answer => {\r\n        if(this.state.correctAnswers[this.state.step].includes(answer)) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    checkAnswer = answer => {\r\n\r\n        const { correctAnswers, step, score, answerState } = this.state;\r\n\r\n        let add = 1;\r\n        let aResult = 1;\r\n\r\n        console.log(answer[0])\r\n        console.log(correctAnswers[step].includes(answer[0]))\r\n\r\n\r\n        let length = answer.length;\r\n\r\n        if(length === 0) {\r\n            add = 0;\r\n            aResult = -1;\r\n        }\r\n        else {\r\n            for (let i = 0; i < length; i++) {\r\n                if (!correctAnswers[step].includes(answer[i])) {\r\n                    add = 0;\r\n                    aResult = -1;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            score: score + add,\r\n            correctAnswer: correctAnswers[step],\r\n            answerState: answerState + aResult,\r\n        }, () =>  console.log(this.state.answerState));\r\n    }\r\n\r\n    nextStep = (step) => {\r\n        this.setState({\r\n            answerState: 0,\r\n            step: step + 1,\r\n            correctAnswer: 0,\r\n            clickedAnswer: [],\r\n        });\r\n    }\r\n\r\n    render(){\r\n        let { questions, answers, correctAnswer, clickedAnswer, step, score, answerState } = this.state;\r\n        return(\r\n            <div className=\"Content\">\r\n                {step <= Object.keys(questions).length ?\r\n                    (<>\r\n                        <Question\r\n                            question={questions[step]}\r\n                        />\r\n                        <Answer\r\n                            answerState={answerState}\r\n                            answer={answers[step]}\r\n                            step={step}\r\n                            pushAnswer={this.pushAnswer}\r\n                            checkAnswer={this.checkAnswer}\r\n                            checkList={this.checkList}\r\n                            correctAnswer={correctAnswer}\r\n                            clickedAnswer={clickedAnswer}\r\n                            verifyAnswer={this.verifyAnswer}\r\n                        />\r\n                        <button\r\n                            className=\"CheckAnswer\"\r\n                            onClick={() => this.checkAnswer(clickedAnswer)}> Check Result\r\n                        </button>\r\n                        <button\r\n                        className=\"NextStep\"\r\n                        disabled={\r\n                            answerState != 0 ? false : true\r\n                        }\r\n                        onClick={() => this.nextStep(step)}>Next</button>\r\n                    </>) : (\r\n                        <div className=\"finalPage\">\r\n                            <h1>You have completed the quiz!</h1>\r\n                            <p>Your score is: {score} of {Object.keys(questions).length}</p>\r\n                            <p>Thank you!</p>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Quiz from './components/Quiz';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Quiz />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}